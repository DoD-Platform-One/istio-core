# "defaults" is a workaround for Helm limitations. Users should NOT set ".defaults" explicitly, but rather directly set the fields internally.
# For instance, instead of `--set defaults.foo=bar`, just set `--set foo=bar`.
defaults:
  global:
    # ImagePullSecrets for control plane ServiceAccount, list of secrets in the same namespace
    # to use for pulling any images in pods that reference this ServiceAccount.
    # Must be set for any cluster configured with private docker registry.
    imagePullSecrets: []

    # Used to locate istiod.
    istioNamespace: istio-system

    externalIstiod: false
    remotePilotAddress: ""

    # Platform where Istio is deployed. Possible values are: "openshift", "gcp".
    # An empty value means it is a vanilla Kubernetes distribution, therefore no special
    # treatment will be considered.
    platform: ""

    # Setup how istiod Service is configured. See https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
    # This is intended only for use with external istiod.
    ipFamilyPolicy: ""
    ipFamilies: []

    # Adds a default EnvoyFilter to increase the security of the Istio cluster adding the following headers to all gateway-enabled Virtual Services:
    # Strict-Transport-Security: max-age=31536000; includeSubDomains
    # X-Frame-Options: SAMEORIGIN
    # X-Content-Type-Options: nosniff
    # Referrer-Policy: strict-origin
    defaultSecurityHeaders:
      enabled: true

  base:
    # Used for helm2 to add the CRDs to templates.
    enableCRDTemplates: false

    # Validation webhook configuration url
    # For example: https://$remotePilotAddress:15017/validate
    validationURL: ""
    # Validation webhook caBundle value. Useful when running pilot with a well known cert
    validationCABundle: ""

    # For istioctl usage to disable istio config crds in base
    enableIstioConfigCRDs: true

  defaultRevision: "default"
  experimental:
    stableValidationPolicy: false
  # -- Custom EnvoyFilters. https://istio.io/latest/docs/reference/config/networking/envoy-filter/
  envoyFilters:
    []
    # # For each filter, specify `name`, `namespace`, and `spec` fields
    # # The following example configures ratelimits for the domain foo.com
    # - name: ratelimits
    #   namespace: istio-system
    #   spec:
    #     configPatches:
    #       - applyTo: VIRTUAL_HOST
    #         match:
    #           context: GATEWAY
    #           routeConfiguration:
    #             vhost:
    #               domainName: "foo.com"
    #         patch:
    #           operation: MERGE
    #           value:
    #             rate_limits:
    #               actions:
    #                 - request_headers:
    #                     header_name: "authorization"
    #                     descriptor_key: "jwt"
    #                 - request_headers:
    #                     header_name: ":path"
    #                     descriptor_key: "path"
